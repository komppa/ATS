name: TestBuildNRelease

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Build docker image
        run: |
          docker build -t 5bcf4108 .
      - name: Start container and test
        run: |
          docker run -v /tmp/5bcf4108_output:/home/ci/app/output --rm 5bcf4108
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '/tmp/5bcf4108_output/pio-test-report-ATS-*.xml'
  build_and_release:
    needs: test
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build -t 5bcf4108 .
          
      - name: Build and publish memory usage and check version
        id: version_check
        continue-on-error: true
        run: |
          container_id=$(docker run -d --entrypoint /entrypointRelease.sh -e "GISTS_TOKEN=${{ secrets.GISTS_TOKEN }}" -v $PWD/.pio:/home/ci/app/.pio 5bcf4108)
          docker wait $container_id
          exit_status=$(docker inspect $container_id --format='{{.State.ExitCode}}')
          echo "Exit Status: $exit_status"
          echo "::set-output name=status::$exit_status"

      - name: Get the version for release
        id: version
        if: steps.version_check.outputs.status == '1'
        run: echo "::set-output name=version::$(cat VERSION)"

      - name: Create Release
        id: create_release
        if: steps.version_check.outputs.status == '1'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        if: steps.version_check.outputs.status == '1'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .pio/build/megaatmega2560/firmware.hex # Replace this with the correct path to your hex file
          asset_name: ATS_firmware.hex
          asset_content_type: application/octet-stream